SPRING DATA 2

* Spring Data: Spring project for data store access
* Coding to databases requires a lot of boilerplate and repetitive coding
* To develop these applications or while changing a datastore, massive repitition of code occurs
  Also, developer reeducation is often required

1. Spring Data Commons
- Spring has a broad collection of enterprise solutions
- Spring Data is one of the solution for data access
- It gives an abstraction for data access irrespective of the datasource being used
- The mission of Spring Data is to provide a familiar and consistent, Spring-based programming model
  for data access while still retaining the special traits of the underlying data store
- Goal is to
  1. Convert Java Entities to Persistent target datastore records and back to Java Entities on retrieval
  2. Help to lookup records
  3. Update the records by updating the entity
  4. Delete the records by deleting the entity

- Repository Pattern
  It is abstraction used by Spring Data to provide the usage and implementation to achieve this
  CRUDRepository: Generic, has all the operations
  DataStore wise we have,
  Spring-Data-JPA: JpaRepository
  Spring-Data-MongoDB: MongoRepository


2. Understanding Object-Relational Mapping
- Logical vs. Physical Model
  Physical model is the database tables
  Logical model is the Java objects
  We can map the model to the table but it is a lot of code
  Difficult to refactor and maintain
  
- JPA: Java Persistence API
  JPA is a specification
  Hibernate, TopLink is implementation of the specification
  It involves metadata mapping (XML or Java annotation)
  * Java Entities <--> Tables
  * Java attributes <--> Columns / Fields

  EntityManager
    Creates, reads, updates and deletes entities

- Mapping a database table to a Java class
  
  Table: Student
  student_id
  student_name
  student_fulltime
  student_age

  @Entity
  @Table(name="STUDENT")
  public class Student {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name="student_id")
	private Integer studentId;

	@Column(name="student_name")
  	private String name;

	@Column(name="student_fulltime")
	private boolean fullTime;
	
	@Column(name="student_age")
	private Integer age;

	public Student(String name, boolean fullTime, Integer age) {
		this.name = name;
		this.fullTime = fullTime;
		this.age = age;
	}
  }
  
- Mapping multiple tables to Java classes
  
  Table: Student
  student_id
  student_name
  student_fulltime
  student_age
  
  Table: Enrollment
  student_id
  course_id

  Table: Course
  course_id
  course_name
  course_dept_id

  Table: Department
  dept_id
  dept_name

  @Entity
  @Table(name="Course")
  public class Course {

	@Id
	@GeneratedValue
	@Column(name="course_id")
	private Integer id;

	@Column(name="course_name")
	private String name;

	// Many courses belong to one department
	@ManyToOne
	@JoinColumn(name="course_dept_id")
	private Department department;

	public Course(String name, Department department) {
		this.name = name;
  		this.department = department;
	}
  }

  @Entity
  @Table(name="Department")
  public class Department {
	
	@Id
	@GeneratedValue
	@Column(name="dept_id")
	private Integer id;

	@Column(name="dept_name")
	private String name;

	// One To Many relationship between course and departments
	// EAGER loading overrides LAZY loading
	// So when a department is fetched, the list of courses are also fetched by JPA
	@OneToMany(mappedBy="department", fetch=FetchType.EAGER, cascade=CascadeType.ALL)
	private List<Course> courses = new ArrayList<>();

	public Department(String name) {
		this.name = name;
	}
  }

  @Entity
  @Table(name="STUDENT")
  public class Student {

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name="student_id", nullable=false)
	private Integer studentId;

	@Column(name="student_name", nullable=false)
  	private String name;

	@Column(name="student_fulltime", nullable=false)
	private boolean fullTime;
	
	@Column(name="student_age")
	private Integer age;

	// Jointable requires a table name: enrollment
	// JoinColumn is student_id and inverseJoinColumn is course_id
	
	@OneToMany(fetch=FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinTable(name="Enrollment",
		   joinColumns={@JoinColumn(name="student_id")},
                   inverseJoinColumns={@JoinColumn(name="course_id")})
	private List<Course> courses = new ArrayList<>();

  }

- JPQL: Java Persistence Query Language
  Used to interact with entities and their persistent state
  Can be used with any DBMS
  JPQL syntax is similar to SQL
  It works with Entities rather than Tables


3. Introduction to Spring Data

- JPA without Spring Data
  (Game changers)
  Java Apps can be written once and run anywhere
  J2EE: Enterprise Solutions without coding the supporting infra
  Hibernate: Removed manual mapping of logical objects to physical databases
  AJAX: Interactive websites
  REST: Reduced multi-machine communication complexity
  Spring Data: Reduced code with better feature implementation

  JPA implementation without Spring Data is messy, boilerplate code, manual handling of EntityManger and associated connections
  
- Spring Data JPA

  Better functionality, less code
  An abstraction is provided irrespective of the underlying datastore
  Follows Repository pattern
  
  public interface Repository<T, ID>
  T: The domain type of the repository it manages
  ID: Type of the entity id

  public interface CrudRepository<T, ID> extends Repository<T, ID>

  Available Methods:
  1. Create/Update
  T save(T entity);
  Iterable<T> saveAll(Iterable<T> entity);

  2. Delete
  void deleteById(ID id)
  void deleteAll(Iterable<? extends T>)
  void delete(T var1)
  void deleteAll()

  3. Read
  Optional<T> findById(ID id)
  Iterable<T> findAllById(Iterable<ID> ids)
  Iterable<T> findAll()
  long count()
  boolean existsById(ID id)

- JpaRepository
  CrudRepository is generic implmentation
  JpaRepository is a specific implementation with additional/specific method implementations
  All features of CrudRepository and also,
  void flush();
  T saveAndFlush(T t);
  void deleteInBatch(Iterable<T> iterable);
  void deleteAllInBatch();

  Benefit:
  - No need to access EntityManagerFactory, when flushing data
  - Help to differentiate from the other type of repositories
    MongoRepository: MongoDB
    SolrCrudRepository: Apache Solr
    GemfireRepository: Pivotal GemFire


4. Querying with Spring Data

- Property Expression Query Methods
  Example:
  findByAge(Integer age)
  findByAttendeeLastName(String last)

- Query method clauses and expressions
  
  Query Method: Conditional Expressions
  E.g: List<Student> findByFullTimeOrAgeLessThan(boolean fullTime, int maxAge);
       List<Student> findByAttendeeFirstNameAndAttendeeLastName(String firstName, String lastName);

       List<Student> findByAttendee(Person person);

  Query Method: Expressions with Operators
  E.g: List<Student> findByAgeGreaterThan(int minimumAge);
       List<Student> findByFullTimeOrAgeLessThan(boolean fullTime, int maxAge);
       List<Student> findByAttendeeLastNameIgnoreCase(String last);

       // Wildcard search
       List<Student> findByAttendeeLastNameLike(String likeString);

  Query Method: Expression Limiting and Ordering
  E.g: Student findFirstByOrderByAttendeeLastNameAsc();
       Student findTopByOrderByAgeDesc();
       List<Student> findTop3ByOrderByAgeDesc();

  @Query Annotated Query Methods
  In case you want a cleaner method signature, or the expression is becoming too complex to read and make sense
  a custom query in JPQL or Datastore specific QL can be written

  When using native approach, nativeQuery=true can be stated, mapping support from JPA is still available

- Paging And Sorting
  Paging: Application fetches chunks of data on demand
  Add a parameter Pageable and return a type Page
  Use PagingAndSortingRepository
  

5. More Repository Types

- Spring Data MongoDB
- Spring Data JDBC
- Spring Data Reactive
  Provides non-blocking I/O called reactive stack
  Uses multi-core processors to handle several connections
  The servlet-based IO provides synchronous blocking IO with one servlet per thread
  Provides interaction non blocking databases like cassandra, couchbase, mongodb